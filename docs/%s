# class `AudioAllocWavetable` 






## Summary

 Members                        | Descriptions                                
--------------------------------|---------------------------------------------
`public inline  AudioAllocWavetable(void)` | 
`public void init(`[`AudioSynthWavetable`](#class_audio_synth_wavetable)` * voices,uint8_t numVoices,sample_data * wavetable,int num_samples,float amp)` | 
`public void setSamples(sample_data * wavetable,int num_samples)` | 
`public void setAmplitude(float amp)` | 
`public void playFreq(float freq)` | 
`public void playNote(int note)` | 
`public void stopFreq(float freq)` | 
`public void stopNote(int note)` | 
`public uint8_t voicesPlaying(void)` | 
`public float noteToFreq(int note)` | 
`public inline float getAmplitude()` | 
`public inline float getFrequency(uint8_t index)` | 

## Members

#### `public inline  AudioAllocWavetable(void)` 





#### `public void init(`[`AudioSynthWavetable`](#class_audio_synth_wavetable)` * voices,uint8_t numVoices,sample_data * wavetable,int num_samples,float amp)` 





#### `public void setSamples(sample_data * wavetable,int num_samples)` 





#### `public void setAmplitude(float amp)` 





#### `public void playFreq(float freq)` 





#### `public void playNote(int note)` 





#### `public void stopFreq(float freq)` 





#### `public void stopNote(int note)` 





#### `public uint8_t voicesPlaying(void)` 





#### `public float noteToFreq(int note)` 





#### `public inline float getAmplitude()` 





#### `public inline float getFrequency(uint8_t index)` 





# class `AudioSynthWavetable` 

```
class AudioSynthWavetable
  : public AudioStream
```  





## Summary

 Members                        | Descriptions                                
--------------------------------|---------------------------------------------
`public inline  AudioSynthWavetable(void)` | 
`public inline void setSamples(const sample_data * samples,int num_samples)` | Set the wavetable samples.
`public inline void setLoop(int start,int end)` | Set the loop start to and end points.
`public inline void setFreqAmp(float freq,float amp)` | Set the frequency and amplitude of the Wavetable.
`public inline void setSampleNote(int note)` | Define the note of the sample.
`public inline void amplitude(float v)` | Changes the amplitude to 'v'.
`public inline void env_delay(float milliseconds)` | Set the delay time.
`public inline void env_attack(float milliseconds)` | Set the attack time.
`public inline void env_hold(float milliseconds)` | Set the hold time.
`public inline void env_decay(float milliseconds)` | 
`public inline void env_sustain(float level)` | Set the sustain level.
`public inline void env_release(float milliseconds)` | Set the release time.
`public void play(void)` | Begin playing a waveform.
`public void stop(void)` | Stop playing waveform.
`public void parseSample(int sample_num,bool custom_env)` | Parse the sample specified by the index sample_num.
`public void playFrequency(float freq,bool custom_env)` | Play waveform at defined frequency.
`public void playNote(int note,int amp,bool custom_env)` | Play sample at specified note, amplitude.
`public inline bool isPlaying(void)` | 
`public void frequency(float freq)` | Change the frequency of the waveform to the defined freq.
`public virtual void update(void)` | Manages all the [AudioSynthWavetable](#class_audio_synth_wavetable) objects.

## Members

#### `public inline  AudioSynthWavetable(void)` 



Class constructor.

#### `public inline void setSamples(const sample_data * samples,int num_samples)` 

Set the wavetable samples.

A wavetable uses a set of samples to generate sound. This function is used to set the samples. 
#### Parameters
* `samples` an array of samples from a decoded SoundFont file 


* `num_samples` number of samples in the array

#### `public inline void setLoop(int start,int end)` 

Set the loop start to and end points.

#### Parameters
* `start` index within the sample array representing the start of the loop 


* `end` index within the sample array representing the end of the loop

#### `public inline void setFreqAmp(float freq,float amp)` 

Set the frequency and amplitude of the Wavetable.

You can use this to set the frequency and amplitude before calling [play()](#class_audio_synth_wavetable_1a394a93a1f34c956ca47c297936ada42a). 
#### Parameters
* `freq` frequency of the generated output (range?) 


* `amp` amplitude of generated output

#### `public inline void setSampleNote(int note)` 

Define the note of the sample.

#### Parameters
* `note` the midi note number a value between 0 and 127

#### `public inline void amplitude(float v)` 

Changes the amplitude to 'v'.

A value of 0 will set the synth output to minimum amplitude (i.e., no output). A value of 1 will set the output to the maximum amplitude. Amplitude is set linearly with intermediate values. 
#### Parameters
* `v` a value between 0.0 and 1.0

#### `public inline void env_delay(float milliseconds)` 

Set the delay time.

#### Parameters
* `milliseconds` length of delay (in milliseconds)

#### `public inline void env_attack(float milliseconds)` 

Set the attack time.

#### Parameters
* `milliseconds` length of the attack time

#### `public inline void env_hold(float milliseconds)` 

Set the hold time.

#### Parameters
* `milliseconds` the length of the hold time

#### `public inline void env_decay(float milliseconds)` 



Set the decay time.


#### Parameters
* `milliseconds` the length of the decay time

#### `public inline void env_sustain(float level)` 

Set the sustain level.

#### Parameters
* `level` a value between 0.0 and 1.0

#### `public inline void env_release(float milliseconds)` 

Set the release time.

#### Parameters
* `milliseconds` the length of the release time

#### `public void play(void)` 

Begin playing a waveform.



#### `public void stop(void)` 

Stop playing waveform.

Waveform does not immediately stop, but fades out based on release time.

#### `public void parseSample(int sample_num,bool custom_env)` 

Parse the sample specified by the index sample_num.

#### Parameters
* `sample_num` an index within the sample array 


* `custom_env` a value of 1 means a custom envelope is set; the default value is 0 (no custom envelope)

#### `public void playFrequency(float freq,bool custom_env)` 

Play waveform at defined frequency.

#### Parameters
* `freq` freqency of the generated output (range?) 


* `custom_env` a value of 1 means a custom envelope is set; the default value is 0 (no custom envelope)

#### `public void playNote(int note,int amp,bool custom_env)` 

Play sample at specified note, amplitude.

#### Parameters
* `note` the midi note number (a value between 0 and 127) 


* `amp` amplitude of generated output 


* `custom_env` a value of 1 means a custom envelope is set and a value is 0 means no custom envelope

#### `public inline bool isPlaying(void)` 



#### Returns
true (non-zero) if playing, otherwise false (zero) if not playing.

#### `public void frequency(float freq)` 

Change the frequency of the waveform to the defined freq.

If the frequency is zero sample generation is stopped. 
#### Parameters
* `freq` frequency of the generated output (range?)

#### `public virtual void update(void)` 

Manages all the [AudioSynthWavetable](#class_audio_synth_wavetable) objects.



# struct `freqTrack_t` 






## Summary

 Members                        | Descriptions                                
--------------------------------|---------------------------------------------
`public float freq` | 
`public unsigned int count` | 

## Members

#### `public float freq` 





#### `public unsigned int count` 





